{"version":3,"sources":["Item.js","Vlist.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","state","isShown","className","style","top","this","height","itemheight","onMouseEnter","setState","onMouseLeave","label","display","React","Component","Vlist","dataLength","renderedItemsRange","numVisibleItems","Math","trunc","start","end","data","loadDataFromServer","containerStyle","scollPos","bind","currentIndx","refs","viewPort","scrollTop","setTimeout","i","push","name","id","result","item","find","key","prevProps","prevState","ref","onScroll","length","renderRows","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c77c6c9c.chunk.js","sourcesContent":["import React from 'react';\n\n//Item class to render each of the list rows\nclass Item extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    state = {\n        isShown: false\n    }\n\n    render(){\n        return (\n        <div className=\"item\"\n            style={{top:this.props.top,height:this.props.itemheight}}\n            onMouseEnter={() => this.setState({isShown: true})}\n            onMouseLeave={() => this.setState({isShown: false})}>\n            <span>{this.props.label}</span>\n            <span>Created by Exton Parson</span>\n            <span>Last Modified Jan 17, 2020</span>\n            <div className=\"buttons\" style={{display: this.state.isShown ? 'block' : 'none'}}><button>Add</button><button>Edit</button><button>X</button></div>\n        </div>)\n    }\n}\n\nexport default Item;","import React from 'react';\nimport Item from './Item';\n\nclass Vlist extends React.Component{\n    constructor(props){\n        super(props);\n        this.dataLength = 1000;\n        this.renderedItemsRange = 30;\n        this.numVisibleItems=Math.trunc(500 / this.props.itemheight);\n        this.state={\n            start:0,\n            end:this.numVisibleItems,\n            data: []     \n        }\n        this.loadDataFromServer(this.state.start, this.state.end);\n        this.containerStyle={height:this.dataLength * this.props.itemheight}\n        \n        this.scollPos=this.scollPos.bind(this)\n    }\n\n    scollPos(){\n        let currentIndx=Math.trunc(this.refs.viewPort.scrollTop/this.props.itemheight);\n        currentIndx= currentIndx - this.numVisibleItems >= this.dataLength ? currentIndx - this.numVisibleItems:currentIndx;\n        if (currentIndx !== this.state.start){\n            this.setState({...this.state,\n                start:currentIndx,\n                end:currentIndx+this.numVisibleItems > this.dataLength -1  ? this.dataLength-1:currentIndx+this.numVisibleItems\n            })\n        }\n    }\n\n    loadDataFromServer(start, end) {\n        setTimeout(() => {\n            const data = []\n            start = start - this.renderedItemsRange < 0 ? 0 : start - this.renderedItemsRange;\n            end = end + this.renderedItemsRange > this.dataLength ? this.dataLength - 1 : end + this.renderedItemsRange;\n            for (let i = start; i <= end; i++){\n                data.push({name: `Row ${i}`, id: i});\n            }\n\n            this.data = data\n            this.setState({...this.state, data});\n        }, 500);\n    }\n    \n    renderRows(){\n        let result=[];\n        for (let i=this.state.start - this.renderedItemsRange;i<this.state.end + this.renderedItemsRange;i++){\n            let item=this.state.data.find((item) => item.id === i);\n            if (item) {\n                result.push(<Item key={i} label={item.name} top={i*this.props.itemheight} itemheight={this.props.itemheight} />);\n            }\n        }\n        return result;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.start !== this.state.start || prevState.end !== this.state.end) {\n            this.loadDataFromServer(this.state.start, this.state.end);\n        }\n    }\n    \n    render(){\n        return (\n        <div ref=\"viewPort\"  className=\"viewPort\" onScroll={this.scollPos} >\n            <div className=\"itemContainer\" style={this.containerStyle}>\n                {this.state.data.length ? this.renderRows() : null}\n            </div>\n        </div>)\n    }\n\n}\n\nexport default Vlist;","import React from 'react';\nimport './App.css';\nimport Vlist from './Vlist';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Vlist itemheight={55} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}